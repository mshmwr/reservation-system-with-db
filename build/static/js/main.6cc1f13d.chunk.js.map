{"version":3,"sources":["components/Header.js","components/Footer.js","components/Button.js","components/Hamburger.js","components/CloseIcon.js","apis/usersApi.js","utils/API.js","apis/reservedDataApi.js","components/Menu.js","pages/HomePage/Home.js","pages/NoticePage/Notice.js","components/TimeLine.js","components/Board.js","utils/Date.js","pages/ReservationPage/page/SelectRegion.js","components/Form.js","pages/ReservationPage/page/FillInRegion.js","components/Stepper.js","utils/Utils.js","pages/ReservationPage/Reservation.js","pages/ThankyouPage/Thankyou.js","components/CalendarDateReservedData.js","components/CalandarOrderDialog.js","components/Calendar.js","pages/ManagementPage/Management.js","pages/ListPage/BulletinBoard.js","pages/MemberSystemPage/MemberSystem.js","App.js","index.js"],"names":["Header","to","className","data","header","headerTitle","headerSubtitle","Footer","Button","text","clickEvent","isDisable","id","onClick","disabled","Hamburger","isShowItem","clickHandler","CloseIcon","getUser","parameters","JSON","parse","stringify","requestParameters","method","fetch","then","response","result","postUser","url","body","patchUser","deleteUser","cache","credentials","headers","mode","redirect","referrer","checkLoggedIn","a","status","getReservedData","date","order_id","room","urlVar","postReservedData","patchReservedData","langs","multiLang_CHT","multiLanguages","Menu","showMenu","isLoggedIn","setOrderSearchResultArr","setShowWindow","useState","inputOrderId","setInputOrderId","orderSearchResultText","setOrderSearchResultText","orderSearchClickHandler","orderId","length","features","orderSearchTexts","noResult","undefined","fetchedData","resultData","memberSystem","management","orderSearch","type","placeholder","orderIdInput","onChange","e","target","value","onFocus","onBlur","Home","setIsLoggedIn","setShowMenu","showWindow","orderSearchResultArr","useEffect","isLogin","fetchData","map","item","orderTableList","label","key","homePage","welcomeTitle","welcomeTexts","instructionTitle","instructionTexts","ruleTitle","ruleTexts","Notice","check","setCheck","noticePage","noticeTitle","title","noticeSubtitles","subtitle","noticeList","notice","name","htmlFor","accept","button","next","hoverCube_clicked_first","hoverCube_clicked_second","hoverCube_hovered","initCubeHover","timeRegion","hover","times","forEach","time","push","index","isSelected","isClicked","TimeLine","roomId","timeRegionMapping","switchCurrentRoom","lineCubeState","setRoomCubes","roomList","setLineCubeState","currentRoom","isReadOnly","needRefreshPage","setNeedRefreshPage","cubeHover","setCubeHover","changeCubeHover","cubeId","needInit","indexOf","callSetLineCubeState","cubesState","slice","cube","initLinesCube","filter","onMouseOver","cubes","isMeetReservedCube","isReserved","handleBoxToggle","getEachTimeReservedStatus","roomDatas","timeReservedStatus","roomData","regionReserved","Array","fill","startIndex","i","endIndex","myRe","convertReservedTimeToStartIndex","hr","start_time","split","min","order_status","parseInt","convertReservedTimeToEndIndex","convertTimeToStartIndex","duration","convertTimeToEndIndex","cubeInitData","reservedDataIndexs","reservedDataUsernames","initLineCubeStates","state","lineCube","start","end","initLineCube","startNum","endNum","initRoomListLineCube","lineCubeStates","cubeStates","reservedIndex","username","fillReservedData","getRoomDatas","reservedDatas","datas","reservedDatasIndexs","convertDatasTimeToIndex","getConstData","ROOM_LIST","roomInfo","START_TIME","reservationPage","startTime","END_TIME","endTime","TIME_REGION","getTimeRegion","TIME_REGION_MAPPING","timeMapping","getTimeRegionMapping","Board","calendarDate","setPlanData","selectedRoom","setReservedData","setInit","getReserverdDataTimeStatus","getReserverdDataUsernames","handleRoomCubes","reservedData","timeReservedUsername","usernames","getEachTimeReservedUsername","firstRoom","secondRoom","empty","firstCubeIdIndex","cubeIdIndex","setCurrentRoom","needResetRoom","isSelectFinished","firstCubeIdNum","replace","includes","machine","Object","keys","TODAY_DATE","tzoffset","Date","getTimezoneOffset","now","toISOString","SelectRegion","backClick","nextClick","nextButtonText","backButtonText","dataListItems","setSelectedData","planData","dateData","setDateData","attendenceData","setAttendenceData","handleAttendenceChange","Number","isNaN","alert","attendence","checkCanNext","alertStr","canNext","defaultValue","isArray","content","Form","props","getMessage","formInputList","needSubmitButton","clearInput","list","setState","handleInputClick","setInputClick","handleChange","bind","handleSubmit","formItem","targetValue","this","preventDefault","onSubmit","inputItem","minLength","maxLength","size","pattern","required","Component","FillInRegin","titles","subTitles","planItems","setFormInputList","getUserInput","buttonTexts","steps","step","selectedData","info","back","Stepper","currentStep","STEP_STATES","stepper","STEP_STATES_NAME","steps_CH","STEP_COLORS","validateInput","inputData","str","regExp","search","Reservation","history","useHistory","userInfoForm","userinfoform","copyUserInfoForm","setStep","goBack","every","input","messages","invalid","orderStatusData","sendData","filterFormData","parsedData","selectStep","listItems","fillInStep","Thankyou","query","URLSearchParams","useLocation","thankyouPage","yourOrderId","get","texts","txt","alt","checkConflicted","reservedStatus","currentDataTimeIndexArr","indexsData","convertDataTimeToIndex","isAppliedData","isTimeRegionOverlapped","some","timeIndex","CalendarDateReservedData","columnDate","dateClickHandler","dateDatas","setDateDatas","fetchReservedData","switchOrderStatus","dateMultiple","CalendarOrderDialog","isShow","closeClickHandler","currentOrderIsConflicted","selectedDate","orderData","setOrderData","orderStatusButton","setOrderStatusButton","originOrderStatusButton","setOriginOrderStatusButton","selectedOrderStatusButton","orderStatusConfirmButtonClickHandler","patchData","target_column","target_value","msg","apiResponse","reservationData","patchFailed","message","checkOrderStatusButtonIsDisable","orderStatus","option","orderIsConflicted","clickDate","today","dateNum","todayNum","num","checkDateIsEarlyThanToday","checkConfirmButtonIsDisable","options","changeOrderStatusClickHandler","managementPage","dialog","confirmButton","daysShortArr","monthNamesArr","reverseDate","reverse","padStart","join","Calendar","setManagementSelectedDate","managementSelectedDate","daysShort","monthNames","todayFormatted","getDate","getMonth","getFullYear","daysInWeek","setSelectedDate","selectedMonthLastDate","prevMonthLastDate","daysInMonth","firstDayInMonth","getDay","startingPoint","prevMonthStartingPoint","currentMonthCounter","nextMonthCounter","rows","cols","calendarRows","j","classes","getPrevMonth","prevValue","getNextMonth","useCalendar","showDialog","setShowDialog","setCurrentOrderIsConflicted","setOrderId","isConflicted","day","values","col","Management","setSelectedRoom","showTimeLineBoard","setShowTimeLineBoard","logoutButtonClickHandler","selectDefaultOption","memberSystemPage","card","instruction","logout","BulletinBoard","listInfos","removeInfo","go","inputVerifier","ownerFormInputList","setAccountActionStatus","errorMsg","emptyColumns","errorMessage","comma","sendApi","accountStatus","switchAccountMessageColor","accountActionStatus","MemberSystem","ownerLoginForm","ownerRegisterForm","copyOwnerLoginForm","copyOwnerRegisterForm","setAccountStatus","accountActionMessage","setAccountActionMessage","inputClick","setOwnerLoginFormInputList","buttonClickHandler","welcome","loggedIn","switchAccountStatus","formInput","hint","App","basename","process","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6cc1f13d.chunk.js","sourcesContent":["import React from \"react\";\nimport data from \"../data.json\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\nfunction Header() {\n  // const header__logo__bg = {\n  //   // backgroundImage: `url(${data.header.logoUrl})`,\n  //   backgroundImage: `url(\"../img/logo_120_120.png\")`,\n  // };\n  return (\n    <header>\n      <Link to=\"/\" className=\"\">\n        <div className=\"header__logo\"></div>\n      </Link>\n      <div className=\"header__content\">\n        <ul>\n          <li className=\"header__content__title common__title common__font--bold\">\n            {data.header.headerTitle}\n          </li>\n          <li className=\"header__content__subtitle common__subtitle\">\n            {data.header.headerSubtitle}\n          </li>\n        </ul>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nfunction Footer() {\n  return <footer>All right is reserved.</footer>;\n}\nexport default Footer;\n","import React from \"react\";\nimport \"./Button.css\";\nconst Button = ({ text, clickEvent, isDisable = false, id }) => {\n  return (\n    <button\n      id={id}\n      className={`btn`}\n      onClick={clickEvent}\n      disabled={isDisable ? \"disabled\" : \"\"}\n    >\n      {text}\n    </button>\n  );\n};\nexport default Button;\n","import React from \"react\";\r\nimport \"./Hamburger.css\";\r\nconst Hamburger = ({ isShowItem, clickHandler }) => {\r\n  return (\r\n    <div className=\"hamburgerIcon\" onClick={clickHandler}>\r\n      <div\r\n        className={\r\n          isShowItem\r\n            ? \"hamburgerIcon__hamburger--open\"\r\n            : \"hamburgerIcon__hamburger--normal\"\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Hamburger;\r\n","import React from \"react\";\r\nimport \"./CloseIcon.css\";\r\nconst CloseIcon = ({ clickHandler }) => {\r\n  return (\r\n    <div className=\"closeIcon\" onClick={clickHandler}>\r\n      <div className=\"closeIcon__close\" />\r\n    </div>\r\n  );\r\n};\r\nexport default CloseIcon;\r\n","import { requestParameters } from \"../utils/API\";\r\n\r\n//取得訂位資訊\r\n\r\n//送出訂位資訊\r\nconst getUser = () => {\r\n  let parameters = JSON.parse(JSON.stringify(requestParameters)); //deep copy\r\n  let url = \"http://localhost:3100/api/user\";\r\n  const method = { method: \"GET\" };\r\n  parameters = { ...method, ...parameters };\r\n  return fetch(url, parameters)\r\n    .then((response) => {\r\n      return response.text();\r\n    })\r\n    .then((result) => {\r\n      //處理資料\r\n      const parsedData = JSON.parse(result).data;\r\n      return parsedData;\r\n    });\r\n};\r\n\r\nconst postUser = (data = {}) => {\r\n  //register\r\n  if (JSON.stringify(data) === \"{}\") {\r\n    return;\r\n  }\r\n  let parameters = JSON.parse(JSON.stringify(requestParameters)); //deep copy\r\n  let url = \"http://localhost:3100/api/user\";\r\n  const method = { method: \"POST\" };\r\n  parameters = { body: JSON.stringify(data), ...method, ...parameters };\r\n  return fetch(url, parameters)\r\n    .then((response) => {\r\n      return response.text();\r\n    })\r\n    .then((result) => {\r\n      //處理資料\r\n      const parsedData = JSON.parse(result).data;\r\n      return parsedData;\r\n    });\r\n};\r\n\r\nconst patchUser = (data = {}) => {\r\n  //login\r\n  if (JSON.stringify(data) === \"{}\") {\r\n    return;\r\n  }\r\n  let parameters = JSON.parse(JSON.stringify(requestParameters)); //deep copy\r\n  let url = \"http://localhost:3100/api/user\";\r\n  const method = { method: \"PATCH\" };\r\n  // console.log(data);\r\n  parameters = { body: JSON.stringify(data), ...method, ...parameters };\r\n  return fetch(url, parameters)\r\n    .then((response) => {\r\n      return response.text();\r\n    })\r\n    .then((result) => {\r\n      //處理資料\r\n      const parsedData = JSON.parse(result).data;\r\n      // console.log(parsedData);\r\n      return parsedData;\r\n    });\r\n};\r\n\r\nconst deleteUser = () => {\r\n  let parameters = JSON.parse(JSON.stringify(requestParameters)); //deep copy\r\n  let url = \"http://localhost:3100/api/user\";\r\n  const method = { method: \"DELETE\" };\r\n  parameters = { ...method, ...parameters };\r\n  return fetch(url, parameters)\r\n    .then((response) => {\r\n      return response.text();\r\n    })\r\n    .then((result) => {\r\n      //處理資料\r\n      const parsedData = JSON.parse(result).data;\r\n      return parsedData;\r\n    });\r\n};\r\n\r\nexport { getUser, postUser, patchUser, deleteUser };\r\n","import { getUser } from \"../apis/usersApi\";\r\n\r\nconst requestParameters = {\r\n  cache: \"no-cache\",\r\n  credentials: \"same-origin\",\r\n  headers: {\r\n    \"user-agent\": \"Mozilla/4.0 MDN Example\",\r\n    \"content-type\": \"application/json\",\r\n  },\r\n  mode: \"cors\",\r\n  redirect: \"follow\",\r\n  referrer: \"no-referrer\",\r\n};\r\n\r\nconst checkLoggedIn = async () => {\r\n  const parsedData = await getUser();\r\n  // console.log(parsedData);\r\n  // return true;\r\n  if (parsedData.status === \"ok\") {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport { requestParameters, checkLoggedIn };\r\n","import { requestParameters } from \"../utils/API\";\n\n//取得訂位資訊\nconst getReservedData = (date = \"\", order_id = \"\", room = \"\") => {\n  // date = date.replace(/-/g, \".\");\n  // let url = \"http://localhost:3100/reservation_data?data[date]=\" + date;\n  if (date === \"\" && order_id === \"\") {\n    return null;\n  }\n  let urlVar = \"\";\n  if (date !== \"\") {\n    urlVar += urlVar === \"\" ? `data[date]=${date}` : `&data[date]=${date}`;\n  }\n  if (order_id !== \"\") {\n    urlVar +=\n      urlVar === \"\"\n        ? `data[order_id]=${order_id}`\n        : `&data[order_id]=${order_id}`;\n  }\n  if (room !== \"\") {\n    urlVar += `&data[room]=${room}`;\n  }\n  // let url = \"http://localhost:3100/reservation_data?data[date]=\" + date;\n  let url = \"http://localhost:3100/reservation_data?\" + urlVar;\n  // console.log(url);\n  return fetch(url, {\n    method: \"GET\",\n  })\n    .then((response) => {\n      return response.text();\n    })\n    .then((result) => {\n      //處理資料\n      const parsedData = JSON.parse(result).data;\n      return parsedData;\n    });\n};\n\n//送出訂位資訊\nconst postReservedData = (data = {}) => {\n  let parameters = JSON.parse(JSON.stringify(requestParameters)); //deep copy\n  let url = \"http://localhost:3100/reservation_data\";\n  const method = { method: \"POST\" };\n  parameters = { body: JSON.stringify(data), ...method, ...parameters };\n  return fetch(url, parameters)\n    .then((response) => {\n      return response.text();\n    })\n    .then((result) => {\n      //處理資料\n      const parsedData = JSON.parse(result).data;\n      return parsedData;\n    });\n};\n\n//修改訂位資訊\nconst patchReservedData = (data = {}) => {\n  let parameters = JSON.parse(JSON.stringify(requestParameters)); //deep copy\n  let url = \"http://localhost:3100/reservation_data\";\n  const method = { method: \"PATCH\" };\n  parameters = { body: JSON.stringify(data), ...method, ...parameters };\n  return fetch(url, parameters)\n    .then((response) => {\n      return response.text();\n    })\n    .then((result) => {\n      const parsedData = JSON.parse(result).data;\n      return parsedData;\n    });\n};\nexport { getReservedData, postReservedData, patchReservedData };\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./Menu.css\";\r\nimport { getReservedData } from \"../apis/reservedDataApi\";\r\nimport multiLang_CHT from \"../data.json\";\r\nimport Button from \"../components/Button\";\r\n\r\nconst langs = multiLang_CHT.multiLanguages;\r\n\r\nconst Menu = ({\r\n  showMenu,\r\n  isLoggedIn,\r\n  setOrderSearchResultArr,\r\n  setShowWindow,\r\n}) => {\r\n  const [language, setLanguage] = useState(langs[0]);\r\n  const [inputOrderId, setInputOrderId] = useState(\"\");\r\n  const [orderSearchResultText, setOrderSearchResultText] = useState(\"\");\r\n  const switchLanguageClickHandler = (e) => {\r\n    setLanguage(e.target.id);\r\n  };\r\n  const orderSearchClickHandler = async () => {\r\n    const orderId = inputOrderId;\r\n    if (orderId === \"\") {\r\n      setOrderSearchResultText(orderId);\r\n      setOrderSearchResultArr([]);\r\n      return;\r\n    }\r\n    if (orderId.length < 42) {\r\n      setOrderSearchResultText(\r\n        multiLang_CHT.features.orderSearchTexts.noResult\r\n      );\r\n      setOrderSearchResultArr([]);\r\n      return;\r\n    }\r\n\r\n    const fetchedData = await getReservedData(undefined, orderId, undefined); //only one record\r\n    if (fetchedData === null) {\r\n      return;\r\n    }\r\n    const resultData = fetchedData.result;\r\n    if (resultData.length === 0) {\r\n      setOrderSearchResultText(\r\n        multiLang_CHT.features.orderSearchTexts.noResult\r\n      );\r\n      setOrderSearchResultArr([]);\r\n      // console.log(\"fetch data is empty array\");\r\n    } else {\r\n      setOrderSearchResultArr(resultData);\r\n      setShowWindow(true);\r\n    }\r\n  };\r\n  const orderInputHandler = (e) => {\r\n    setInputOrderId(e.target.value);\r\n  };\r\n  const orderInputOnFocus = () => {};\r\n  const orderInputOnBlur = () => {\r\n    setOrderSearchResultText(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className={`menu ${showMenu ? \"\" : \"common__hidden\"}`}>\r\n      {/* <Link to=\"/bulletinBoard\" className=\"common__block home__content__btn\">\r\n        <Button text=\"留言版\" />\r\n      </Link> */}\r\n      {/* <div className=\"common__block home__menu__language\">\r\n        {langs.map((lang) => (\r\n          <div\r\n            key={lang}\r\n            className={\r\n              language === lang\r\n                ? \"home__menu__language--selected\"\r\n                : \"home__menu__language--unselected\"\r\n            }\r\n          >\r\n            <Button\r\n              id={lang}\r\n              text={lang}\r\n              clickEvent={switchLanguageClickHandler}\r\n              isDisable={language === lang}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div> */}\r\n\r\n      <Link to=\"/memberSystem\" className=\"common__block home__menu__feature\">\r\n        <Button text={multiLang_CHT.features.memberSystem} />\r\n      </Link>\r\n\r\n      {isLoggedIn && (\r\n        <Link to=\"/management\" className=\"common__block home__menu__feature\">\r\n          <Button text={multiLang_CHT.features.management} />\r\n        </Link>\r\n      )}\r\n      <div className=\"common__block home__menu__order\">\r\n        <Button\r\n          text={multiLang_CHT.features.orderSearch}\r\n          clickEvent={orderSearchClickHandler}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder={multiLang_CHT.features.orderSearchTexts.orderIdInput}\r\n          className=\"home__menu__order__input\"\r\n          onChange={orderInputHandler}\r\n          onFocus={orderInputOnFocus}\r\n          onBlur={orderInputOnBlur}\r\n        />\r\n        {orderSearchResultText === \"\" ? null : (\r\n          <p className=\"home__menu__order__result\">{orderSearchResultText}</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Home.css\";\nimport multiLang_CHT from \"../../data.json\";\nimport Button from \"../../components/Button\";\nimport Hamburger from \"../../components/Hamburger\";\nimport CloseIcon from \"../../components/CloseIcon\";\nimport Menu from \"../../components/Menu\";\nimport { checkLoggedIn } from \"../../utils/API\";\n\nfunction Home() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showWindow, setShowWindow] = useState(false);\n  const [orderSearchResultArr, setOrderSearchResultArr] = useState([]);\n  // console.log(isLoggedIn);\n\n  useEffect(() => {\n    async function fetchData() {\n      const isLogin = await checkLoggedIn();\n      setIsLoggedIn(isLogin);\n    }\n    fetchData();\n  }, [isLoggedIn]);\n\n  const menuClickHandler = () => {\n    setShowMenu(!showMenu);\n  };\n  const closeWindowClickHandler = () => {\n    setShowWindow(false);\n  };\n\n  return (\n    <div className=\"home common__pageFrame\">\n      <Hamburger isShowItem={showMenu} clickHandler={menuClickHandler} />\n      <Menu\n        showMenu={showMenu}\n        isLoggedIn={isLoggedIn}\n        setOrderSearchResultArr={setOrderSearchResultArr}\n        setShowWindow={setShowWindow}\n      />\n\n      {showWindow && (\n        <div className=\"orderResultWindow\">\n          <CloseIcon clickHandler={closeWindowClickHandler} />\n          {orderSearchResultArr.length !== 0 &&\n            orderSearchResultArr.map((item) => (\n              <div key={item.order_id} className=\"orderResultWindow__table\">\n                {multiLang_CHT.orderTableList.map((data) => (\n                  <div\n                    key={data.key}\n                    className=\"orderResultWindow__table__item\"\n                  >\n                    <p className=\"orderResultWindow__table__item__label\">\n                      {data.label}\n                    </p>\n                    <p className=\"orderResultWindow__table__item__value\">\n                      {item[data.key]}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            ))}\n        </div>\n      )}\n\n      <div className=\"home__banner\"></div>\n      <div className=\"home__welcome\">\n        <p className=\"home__welcome__title common__title common__font--bold\">\n          {multiLang_CHT.homePage.welcomeTitle}\n        </p>\n        <ul>\n          {multiLang_CHT.homePage.welcomeTexts.map((text) => (\n            <li key={`welcomeText${text}`}>{text}</li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"home__content\">\n        <div className=\"home__content__instruction\">\n          <p className=\"home__content__instruction__title common__subtitle common__font--bold common__block--bilateral\">\n            {multiLang_CHT.homePage.instructionTitle}\n          </p>\n          {multiLang_CHT.homePage.instructionTexts.map((text) => (\n            <p\n              className=\"home__content__instruction__texts common__interval--normal\"\n              key={`instructionText${text}`}\n            >\n              {text}\n            </p>\n          ))}\n          <p className=\"home__content__instruction__ruleTitle common__font--bold \">\n            {multiLang_CHT.homePage.ruleTitle}\n          </p>\n          <ul>\n            {multiLang_CHT.homePage.ruleTexts.map((text) => (\n              <li\n                className=\"className=home__content__instruction__ruleTexts\"\n                key={`ruleText${text}`}\n              >\n                {text}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <Link to=\"/notice\" className=\"common__block home__content__btn\">\n          <Button text=\"開始預約\"></Button>\n        </Link>\n        {isLoggedIn && (\n          <Link to=\"/management\" className=\"common__block home__content__btn\">\n            <Button text=\"前往後台\"></Button>\n          </Link>\n        )}\n\n        {isLoggedIn && (\n          <Link to=\"/memberSystem\" className=\"common__block home__content__btn\">\n            <Button text=\"會員系統\"></Button>\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n}\nexport default Home;\n","import React, { useState } from \"react\";\nimport data from \"../../data.json\";\nimport \"./Notice.css\";\nimport Button from \"../../components/Button\";\nimport { Link } from \"react-router-dom\";\n\nfunction Notice() {\n  const [check, setCheck] = useState(false);\n  const handleChange = () => setCheck(!check);\n\n  return (\n    <div className=\"notice common__pageFrame\">\n      <div className=\"common__titleBlock\">\n        {data.noticePage.noticeTitle.map((title) => {\n          return (\n            <div\n              key={title}\n              className=\"notice__title common__title common__font--bold\"\n            >\n              <p>{title}</p>\n            </div>\n          );\n        })}\n        {data.noticePage.noticeSubtitles.map((subtitle) => {\n          return (\n            <div key={subtitle} className=\"notice__subtitle common__subtitle\">\n              <p>{subtitle}</p>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"notice__list common__text common__block\">\n        <ul>\n          {data.noticePage.noticeList.map((notice) => {\n            return <li key={notice}>{notice}</li>;\n          })}\n        </ul>\n      </div>\n      <form name=\"notice-form\" className=\"notice__form\" onChange={handleChange}>\n        <div className=\"notice__form__accept common__block\">\n          <input\n            type=\"checkbox\"\n            id=\"accept-notice-rule\"\n            name=\"accept-notice-rule\"\n            value=\"false\"\n          ></input>\n          <label htmlFor=\"accept-notice-rule\" className=\"common__heading\">\n            {data.noticePage.accept}\n          </label>\n        </div>\n\n        <Link\n          to=\"/reservation\"\n          className={`common__block  ${check ? \"\" : \"common__hidden\"}`}\n        >\n          <Button text={data.noticePage.button.next}></Button>\n        </Link>\n      </form>\n    </div>\n  );\n}\n\nexport default Notice;\n","import React, { useState, useEffect } from \"react\";\nimport \"./TimeLine.css\";\n\nlet hoverCube_clicked_first = -1;\nlet hoverCube_clicked_second = -1;\nlet hoverCube_hovered = -1;\n\nconst initCubeHover = (timeRegion) => {\n  let hover = [];\n  let times = [];\n  timeRegion.forEach((time) => {\n    times.push(time);\n    times.push(time);\n  });\n  times.forEach((time, index) => {\n    if (!(index % 2)) {\n      hover.push({\n        id: `${time}L`,\n        isSelected: false,\n        index: index,\n        isClicked: false,\n      });\n    } else {\n      hover.push({\n        id: `${time}R`,\n        isSelected: false,\n        index: index,\n        isClicked: false,\n      });\n    }\n  });\n  return hover;\n};\n\n//------------------------------------\nexport const TimeLine = ({\n  roomId,\n  timeRegion,\n  timeRegionMapping,\n  switchCurrentRoom,\n  lineCubeState,\n  setRoomCubes,\n  roomList,\n  setLineCubeState,\n  currentRoom,\n  isReadOnly,\n  needRefreshPage,\n  setNeedRefreshPage,\n}) => {\n  const [cubeHover, setCubeHover] = useState(initCubeHover(timeRegion));\n\n  useEffect(() => {\n    setCubeHover(initCubeHover(timeRegion));\n    if (setNeedRefreshPage !== undefined) {\n      setNeedRefreshPage(false);\n    }\n  }, [needRefreshPage]);\n\n  const cubeClickHandler = (e) => {\n    const cubeId = e.target.id;\n    // console.log(roomId + \", \" + cubeId);\n    if (cubeId === \"\") return;\n    if (roomId === cubeId) return;\n    let needInit = switchCurrentRoom(roomId, cubeId);\n    callSetLineCubeState(cubeId, needInit);\n    changeCubeHover(cubeId, needInit);\n  };\n\n  const changeCubeHover = (cubeId, needInit) => {\n    if (hoverCube_clicked_first >= 0 && hoverCube_clicked_second >= 0) {\n      //起點 和 終點 皆已選擇，本次點擊當作是新的點擊\n      hoverCube_clicked_first = timeRegionMapping.indexOf(cubeId);\n      hoverCube_clicked_second = -1;\n      setCubeHover(initCubeHover(timeRegion));\n      // console.log(\"新的點擊\");\n      return;\n    }\n    if (hoverCube_clicked_first >= 0 && hoverCube_clicked_second === -1) {\n      //已選擇了起點\n      if (needInit) {\n        /*  兩種情況\n          1.  起點 和 終點 之間有已經被預約的時間區塊: reset\n          2.  點選的時間區塊是 前次點選 > 當次點選，當作是新的點擊: reset\n        */\n        // console.log(\"當次操作的選擇無效: reset\");\n        hoverCube_clicked_first = timeRegionMapping.indexOf(cubeId);\n        hoverCube_clicked_second = -1;\n        setCubeHover(initCubeHover(timeRegion));\n        callSetLineCubeState(cubeId, needInit);\n        return;\n      }\n      //起點 和 終點 之間沒有已經被預約的時間區塊\n      // console.log(\"選擇完成\");\n      hoverCube_clicked_second = timeRegionMapping.indexOf(cubeId);\n      callSetLineCubeState(cubeId, needInit);\n    }\n    if (hoverCube_clicked_first === -1) {\n      //還沒選擇 起點 和 終點\n      // console.log(\"第一次選擇\");\n      hoverCube_clicked_first = timeRegionMapping.indexOf(cubeId);\n      callSetLineCubeState(cubeId, needInit);\n    }\n  };\n\n  const callSetLineCubeState = (cubeId, needInit) => {\n    const cubesState = lineCubeState[roomId].slice();\n    cubesState.forEach((cube) => {\n      if (\n        `${cube.roomId}${cube.cubeId}${cube.label}` === `${roomId}${cubeId}`\n      ) {\n        cube.isSelected = true;\n      }\n    });\n    if (needInit) {\n      let initLinesCube = setRoomCubes(\n        roomList.filter((room) => room.id !== roomId)\n      );\n      setLineCubeState({ ...initLinesCube, [roomId]: cubesState });\n      return;\n    }\n    // console.log(\"not needInit\");\n    setLineCubeState({ ...lineCubeState, [roomId]: cubesState });\n  };\n  const handleBoxToggle = (cubeId) => {\n    /*\n      起點 < cube 會設定 isSelected = true <= 目前指到的 cube 的位置 (hover) \n    */\n    const cubes = cubeHover.slice();\n    const cubesState = lineCubeState[roomId].slice();\n    hoverCube_hovered = timeRegionMapping.indexOf(cubeId); //目前指到的 cube 的位置\n    if (hoverCube_clicked_first >= 0 && hoverCube_clicked_second >= 0) {\n      return; //起點和終點都選了\n    }\n    let isMeetReservedCube = false; //是否已經碰到被預約的cube\n    cubes.forEach((cube, index) => {\n      if (isMeetReservedCube) {\n        //已經碰到被預約的cube，不再繼續hover\n        return;\n      }\n      if (hoverCube_clicked_first === -1) {\n        return; //還沒選起點\n      }\n\n      if (cube.index < hoverCube_clicked_first) {\n        return; //cube的位置 < 起點的位置\n      }\n      if (\n        cubesState[index].isReserved &&\n        hoverCube_hovered > cubesState[index].index\n      ) {\n        isMeetReservedCube = true;\n        return; //碰到已預約的cube\n      }\n      if (cube.index <= hoverCube_hovered) {\n        cube.isSelected = true; //cube的位置 < 目前指到的 cube 的位置\n        return;\n      }\n      cube.isSelected = false;\n    });\n    setCubeHover(cubes);\n  };\n\n  return (\n    <div\n      className={`board__reservationBoardItem__timeLine ${\n        isReadOnly ? \"common__disablePointerEvent\" : \"\"\n      }\n      `}\n      id={roomId}\n      onClick={cubeClickHandler}\n    >\n      {lineCubeState[roomId].map((cube, index) => (\n        <div\n          key={`${cube.cubeId}${cube.label}`}\n          className=\"board__reservationBoardItem__timeLine__cube\"\n        >\n          <div\n            onMouseOver={() => handleBoxToggle(`${cube.cubeId}${cube.label}`)}\n            className={`timeLineCube\n          ${index % 2 ? \"timeLineCube__right\" : \"timeLineCube__left\"}\n\n          ${\n            roomId === currentRoom.slice()[0].roomId &&\n            cubeHover.slice()[index].isSelected\n              ? \"timeLineCube--selected-hovered\"\n              : \"\"\n          }\n\n          ${cube.isReserved ? \"timeLineCube--reserved\" : \"\"}\n          `}\n            id={`${cube.cubeId}${cube.label}`}\n          >\n            {index % 2 ? null : `${cube.cubeId}`}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./Board.css\";\nimport multiLang_CHT from \"../data.json\";\nimport { TimeLine } from \"./TimeLine\";\nimport { getReservedData } from \"../apis/reservedDataApi\";\nconst initLineCube = (start, end, roomId) => {\n  /* lineCube\n    {\n      roomId:\"A\", \n      cubeId:\"9\", \n      label:\"L\", \n      isSelected: boolean,\n      isReserved: boolean,\n      index: number\n    }\n   */\n\n  let lineCube = [];\n  for (let i = start; i <= end; i++) {\n    lineCube.push({\n      roomId: roomId,\n      cubeId: i,\n      label: \"L\",\n      isSelected: false,\n      isReserved: false,\n      index: (i - start) * 2,\n    });\n    lineCube.push({\n      roomId: roomId,\n      cubeId: i,\n      label: \"R\",\n      isSelected: false,\n      isReserved: false,\n      name: null,\n      index: (i - start) * 2 + 1,\n    });\n  }\n  return lineCube;\n};\n\nconst getTimeRegion = (startTime, endTime) => {\n  let timeRegion = [];\n  for (let i = startTime; i <= endTime; i++) {\n    timeRegion.push(i);\n  }\n  return timeRegion;\n};\n\nconst getTimeRegionMapping = (timeRegion) => {\n  let timeMapping = [];\n  timeRegion.forEach((time) => {\n    timeMapping.push(`${time}L`);\n    timeMapping.push(`${time}R`);\n  });\n  return timeMapping;\n};\n\nconst initRoomListLineCube = (roomList, cubeInitData) => {\n  let state = {};\n  roomList.forEach((room) => {\n    let lineCube = initLineCube(\n      cubeInitData.startNum,\n      cubeInitData.endNum,\n      room.id\n    );\n    state[room.id] = lineCube;\n  });\n  return state;\n};\n\nconst getEachTimeReservedStatus = (roomDatas, timeRegionMapping, roomList) => {\n  let timeReservedStatus = {};\n  roomDatas.forEach((roomData, index) => {\n    let regionReserved = new Array(timeRegionMapping.length).fill(false);\n\n    let roomId = \"\";\n    if (roomData.length === 0) {\n      roomId = roomList[index].id;\n      timeReservedStatus[roomId] = regionReserved;\n      return;\n    }\n    roomData.forEach((data) => {\n      roomId = data.room;\n      if (data.startIndex === -1) return;\n      for (let i = 0; i < timeRegionMapping.length; i++) {\n        if (i >= data.startIndex && i <= data.endIndex) {\n          regionReserved[i] = true;\n        }\n      }\n    });\n    timeReservedStatus[roomId] = regionReserved;\n  });\n  return timeReservedStatus;\n};\nconst getEachTimeReservedUsername = (\n  roomDatas,\n  timeRegionMapping,\n  roomList\n) => {\n  let timeReservedUsername = {};\n  roomDatas.forEach((roomData, index) => {\n    let usernames = new Array(timeRegionMapping.length).fill(\"\");\n    let roomId = \"\";\n    if (roomData.length === 0) {\n      roomId = roomList[index].id;\n      timeReservedUsername[roomId] = usernames;\n      return;\n    }\n    roomData.forEach((data) => {\n      roomId = data.room;\n      if (data.startIndex === -1) return;\n      for (let i = 0; i < timeRegionMapping.length; i++) {\n        if (i >= data.startIndex && i <= data.endIndex) {\n          usernames[i] = data.name;\n        }\n      }\n    });\n    timeReservedUsername[roomId] = usernames;\n  });\n  return timeReservedUsername;\n};\n\nconst myRe = /\\D+/g;\n\n// const RESERVED_DATA = data.reservedData;\n/* reservedData\n    [\n      {\n        \"date\": \"2021.03.01\",\n        \"room\": \"A\" ,\n        \"time\": \"10:00\" ,\n        \"duration\": 3 ,\n        \"name\": \"Amy\"\n      },\n      {\n        \"date\": \"2021.03.01\",\n        \"room\": \"A\" ,\n        \"time\": \"14:00\" ,\n        \"duration\": 3.5,\n        \"name\": \"Mr.Chen's birthday\"\n      },\n      {\n        \"date\": \"2021.03.01\",\n        \"room\": \"B\" ,\n        \"time\": \"10:00\" ,\n        \"duration\": 3,\n        \"name\": \"Let's go party! party!!!!\" \n      },\n      {\n        \"date\": \"2021.03.01\",\n        \"room\": \"C\" ,\n        \"time\": \"10:00\" ,\n        \"duration\": 3,\n        \"name\": \"Singing\" \n      }\n    ]\n  */\nconst convertReservedTimeToStartIndex = (timeRegion, data) => {\n  let hr = data.start_time.split(\":\")[0];\n  let min = data.start_time.split(\":\")[1];\n  let startIndex =\n    data.order_status === \"reserved\"\n      ? timeRegion.indexOf(parseInt(hr, 10)) * 2 + (min === \"00\" ? 0 : 1)\n      : -1;\n  return startIndex;\n};\nconst convertReservedTimeToEndIndex = (timeRegion, data) => {\n  const startIndex = convertTimeToStartIndex(timeRegion, data);\n  let endIndex =\n    data.order_status === \"reserved\"\n      ? startIndex + (data.duration / 0.5 - 1)\n      : -1;\n  return endIndex;\n};\nconst convertTimeToStartIndex = (timeRegion, data) => {\n  let hr = data.start_time.split(\":\")[0];\n  let min = data.start_time.split(\":\")[1];\n  let startIndex =\n    timeRegion.indexOf(parseInt(hr, 10)) * 2 + (min === \"00\" ? 0 : 1);\n  return startIndex;\n};\nconst convertTimeToEndIndex = (timeRegion, data) => {\n  const startIndex = convertTimeToStartIndex(timeRegion, data);\n  let endIndex = startIndex + (data.duration / 0.5 - 1);\n  return endIndex;\n};\n\nconst convertDatasTimeToIndex = (timeRegion, datas) => {\n  let reservedDatasIndexs = [];\n  datas.forEach((data) => {\n    reservedDatasIndexs.push({\n      ...data,\n      startIndex: convertReservedTimeToStartIndex(timeRegion, data),\n      endIndex: convertReservedTimeToEndIndex(timeRegion, data),\n    });\n  });\n  return reservedDatasIndexs;\n};\n\nconst convertDataTimeToIndex = (timeRegion, data) => {\n  let reservedDataIndexs = [];\n  reservedDataIndexs.push({\n    ...data,\n    startIndex: convertTimeToStartIndex(timeRegion, data),\n    endIndex: convertTimeToEndIndex(timeRegion, data),\n  });\n  return reservedDataIndexs;\n};\n\nconst fillReservedData = (\n  roomList,\n  lineCubeStates,\n  reservedDataIndexs,\n  reservedDataUsernames\n) => {\n  let cubeStates = {};\n  let lineCubeState = null;\n  let reservedIndex = null;\n  let username = null;\n  roomList.forEach((room) => {\n    lineCubeState = lineCubeStates[room.id].slice();\n    reservedIndex = reservedDataIndexs[room.id].slice();\n    username = reservedDataUsernames[room.id].slice();\n    lineCubeState.forEach((cube) => {\n      if (reservedIndex[cube.index]) {\n        cube.isReserved = true;\n        cube.name = username[cube.index];\n        return;\n      }\n      cube.name = \"\";\n    });\n    cubeStates[room.id] = lineCubeState;\n  });\n  return cubeStates;\n};\nconst setRoomCubes = (\n  roomList,\n  cubeInitData,\n  reservedDataIndexs,\n  reservedDataUsernames\n) => {\n  let initLineCubeStates = initRoomListLineCube(roomList, cubeInitData);\n  let cubeStates = fillReservedData(\n    roomList,\n    initLineCubeStates,\n    reservedDataIndexs,\n    reservedDataUsernames\n  );\n  return cubeStates;\n};\n\nconst getRoomDatas = (roomList, timeRegion, reservedDatas) => {\n  return roomList.map((room) => {\n    return convertDatasTimeToIndex(timeRegion, reservedDatas)\n      .slice()\n      .filter((data) => {\n        return data.room === room.id;\n      });\n  });\n};\n\nconst getConstData = () => {\n  const ROOM_LIST = multiLang_CHT.roomInfo.roomList;\n  const START_TIME = multiLang_CHT.reservationPage.startTime;\n  const END_TIME = multiLang_CHT.reservationPage.endTime;\n  const TIME_REGION = getTimeRegion(START_TIME, END_TIME);\n  const TIME_REGION_MAPPING = getTimeRegionMapping(TIME_REGION);\n\n  return {\n    ROOM_LIST,\n    START_TIME,\n    END_TIME,\n    TIME_REGION,\n    TIME_REGION_MAPPING,\n  };\n};\n\nconst Board = ({\n  calendarDate = \"\",\n  setPlanData,\n  selectedRoom = \"\",\n  isReadOnly,\n  needRefreshPage,\n  setNeedRefreshPage,\n}) => {\n  const { ROOM_LIST, START_TIME, END_TIME, TIME_REGION, TIME_REGION_MAPPING } =\n    getConstData();\n\n  useEffect(async () => {\n    const fetchData = async () => {\n      const fetchedData = await getReservedData(\n        calendarDate,\n        undefined,\n        selectedRoom\n      );\n      if (fetchedData === null) {\n        return;\n      }\n      const resultData = fetchedData.result;\n      if (resultData === null) {\n        // console.log(\"fetch data is null\");\n      }\n      setReservedData(resultData);\n      setInit(resultData);\n    };\n    fetchData();\n  }, [calendarDate, needRefreshPage]);\n  const setInit = (data) => {\n    setLineCubeState(\n      setRoomCubes(\n        ROOM_LIST,\n        cubeInitData,\n        getReserverdDataTimeStatus(data),\n        getReserverdDataUsernames(data)\n      )\n    );\n  };\n\n  const handleRoomCubes = (roomList) => {\n    return setRoomCubes(\n      roomList,\n      cubeInitData,\n      getReserverdDataTimeStatus(reservedData),\n      getReserverdDataUsernames(reservedData)\n    );\n  };\n\n  /* roomList\n    {\n      \"id\":\"A\",\n      \"title\":\"A包廂\",\n      \"subtitle\":\"F1\", \n      \"machine\":\"((JOYSOUND))\"\n    },\n  */\n\n  let cubeInitData = {\n    startNum: START_TIME,\n    endNum: END_TIME,\n  };\n\n  const getReserverdDataTimeStatus = (data) => {\n    let reservedStatus = getEachTimeReservedStatus(\n      getRoomDatas(ROOM_LIST, TIME_REGION, data),\n      TIME_REGION_MAPPING,\n      ROOM_LIST\n    );\n    return reservedStatus;\n  };\n  const getReserverdDataUsernames = (data) => {\n    let usernames = getEachTimeReservedUsername(\n      getRoomDatas(ROOM_LIST, TIME_REGION, data),\n      TIME_REGION_MAPPING,\n      ROOM_LIST\n    );\n    return usernames;\n  };\n\n  const switchCurrentRoom = (roomId, cubeId) => {\n    /*\n      currentRoom: [ {roomId:\"\",cubeId:\"\", index:number}, {roomId:\"\",cubeId:\"\",index:number} ]\n    */\n    let needInit = false;\n    const firstRoom = currentRoom.slice()[0];\n    const secondRoom = currentRoom.slice()[1];\n    // console.log(firstRoom.roomId + \", \" + secondRoom.roomId);\n    const empty = { roomId: \"\", cubeId: \"\", index: -1 };\n    //取得 index\n    const firstCubeIdIndex = TIME_REGION_MAPPING.indexOf(firstRoom.cubeId);\n    const cubeIdIndex = TIME_REGION_MAPPING.indexOf(cubeId);\n    let newRoom = null;\n\n    if (firstRoom.roomId === secondRoom.roomId) {\n      //當作是新的點擊\n      // console.log(\"新的點擊\");\n      newRoom = [{ roomId: roomId, cubeId: cubeId, index: cubeIdIndex }, empty];\n      setCurrentRoom(newRoom);\n      needInit = true;\n\n      return needInit;\n    }\n\n    /*\n      排除後，currentRoom只會剩下這種情況: [{\"roomId\", \"cubeId\"}, {\"\", \"\"}]\n      因為 e.g. roomId=A (first) 和 roomId=B (second) 的情況並不存在\n    */\n    let needResetRoom = false;\n    let isSelectFinished = false;\n    switch (firstRoom.roomId) {\n      case roomId:\n        //本次點擊 和 前次點擊 的 roomId 一樣\n        // console.log(\"本次點擊 和 前次點擊 的 roomId 一樣\");\n        /* 會有三種情況:\n          1. 兩次點的是同一個時間方塊\n              newRoom = [empty, empty]; //reset\n          2. 本次點擊 和 前次點擊 之間有已經被預約的時間區塊:\n              newRoom = [empty, empty]; //reset\n\n          3. 本次點擊 和 前次點擊 之間沒有已經被預約的時間區塊:\n              判斷 cubeId 大於 或 等於 或 小於 firstRoom.cubeId\n                大於: [firstRoom, { [roomId]: roomId, [cubeId]: cubeId }]; //選擇完成\n                等於: 直接break\n                小於: newRoom = [{ [roomId]: roomId, [cubeId]: cubeId }, empty];//當作是新的點擊\n        */\n        //condition 1:兩次點的是同一個時間方塊\n        if (firstRoom.cubeId === cubeId) {\n          needResetRoom = true;\n          break;\n        }\n        //condition 2: 如果有已經被預約的時間區塊: reset\n        for (let i = firstCubeIdIndex; i <= cubeIdIndex; i++) {\n          if (getReserverdDataTimeStatus(reservedData)[roomId][i]) {\n            needResetRoom = true;\n            break;\n          }\n        }\n        if (needResetRoom) {\n          // console.log(\"有已經被預約的時間區塊: reset\");\n          break;\n        }\n\n        //condition 3: 如果沒有已經被預約的時間區塊\n        if (cubeIdIndex > firstCubeIdIndex) {\n          const firstCubeIdNum = parseInt(\n            firstRoom.cubeId.replace(myRe, \"\"),\n            10\n          );\n          newRoom = [\n            firstRoom,\n            { roomId: roomId, cubeId: cubeId, index: cubeIdIndex },\n          ];\n          setCurrentRoom(newRoom);\n          let duration = (cubeIdIndex - firstCubeIdIndex + 1) * 0.5;\n          setPlanData({\n            room: roomId,\n            duration: duration,\n            start_time: `${firstCubeIdNum}:${\n              firstRoom.cubeId.includes(\"L\") ? \"00\" : \"30\"\n            }`,\n          }); //{ room: \"A包廂\", duration: 3, startTime: \"11:00\" };\n          isSelectFinished = true;\n          // console.log(\"選擇完成\");\n        }\n        if (cubeIdIndex < firstCubeIdIndex) {\n          newRoom = [\n            { roomId: roomId, cubeId: cubeId, index: cubeIdIndex },\n            empty,\n          ];\n          setCurrentRoom(newRoom);\n          needInit = true;\n          // console.log(\"新的點擊\");\n        }\n        break;\n\n      default:\n        //本次點擊 和 前次點擊 的 roomId 不一樣: 當作是新的點擊\n        // console.log(\"本次點擊 和 前次點擊 的 roomId 不一樣\");\n        newRoom = [\n          { roomId: roomId, cubeId: cubeId, index: cubeIdIndex },\n          empty,\n        ];\n        setCurrentRoom(newRoom);\n        needInit = true;\n        break;\n    }\n\n    if (needResetRoom) {\n      newRoom = [empty, empty];\n      setCurrentRoom(newRoom);\n      needInit = true;\n    }\n    if (!isSelectFinished) {\n      setPlanData({});\n    }\n    return needInit;\n  };\n  const [reservedData, setReservedData] = useState(null);\n  const [lineCubeState, setLineCubeState] = useState({});\n\n  const [currentRoom, setCurrentRoom] = useState([\n    { roomId: \"\", cubeId: \"\", index: -1 },\n    { roomId: \"\", cubeId: \"\", index: -1 },\n  ]); //[前次點擊, 本次點擊]\n  return (\n    <div className=\"board\">\n      {ROOM_LIST.filter((room) =>\n        selectedRoom === \"\"\n          ? room.id !== selectedRoom\n          : room.id === selectedRoom\n      ).map((room) => (\n        <div\n          key={`boardItem${room.title}`}\n          className=\"board__reservationBoardItem common__interval--normal\"\n        >\n          <div className=\"board__reservationBoardItem__room\">\n            <p className=\"board__reservationBoardItem__room__title common__interval--shrink \">{`${room.title}-${room.subtitle}`}</p>\n            <p className=\"board__reservationBoardItem__room__machine\">\n              {room.machine}\n            </p>\n          </div>\n          <div className=\"board__reservationBoardItem__reservedBoard\">\n            {Object.keys(lineCubeState).length !== 0 ? (\n              <TimeLine\n                roomId={room.id}\n                timeRegion={TIME_REGION}\n                timeRegionMapping={TIME_REGION_MAPPING}\n                switchCurrentRoom={switchCurrentRoom}\n                lineCubeState={lineCubeState}\n                setRoomCubes={handleRoomCubes}\n                roomList={ROOM_LIST}\n                setLineCubeState={setLineCubeState}\n                currentRoom={currentRoom}\n                isReadOnly={isReadOnly}\n                needRefreshPage={needRefreshPage}\n                setNeedRefreshPage={setNeedRefreshPage}\n              ></TimeLine>\n            ) : null}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport {\n  Board,\n  getRoomDatas,\n  getEachTimeReservedStatus,\n  getConstData,\n  convertDataTimeToIndex,\n};\n","const TODAY_DATE = (() => {\r\n  const tzoffset = new Date().getTimezoneOffset() * 60000; //offset in milliseconds\r\n  const localISOTime = new Date(Date.now() - tzoffset)\r\n    .toISOString()\r\n    .slice(0, -1);\r\n  const today = localISOTime.slice(0, 10);\r\n  return today;\r\n})();\r\n\r\nexport { TODAY_DATE };\r\n","import React, { useState } from \"react\";\nimport { Board } from \"../../../components/Board\";\nimport Button from \"../../../components/Button\";\nimport \"./SelectRegion.css\";\nimport { TODAY_DATE } from \"../../../utils/Date\";\n\nexport const SelectRegion = ({\n  backClick,\n  nextClick,\n  nextButtonText,\n  backButtonText,\n  dataListItems,\n  setSelectedData,\n}) => {\n  const [planData, setPlanData] = useState({});\n  const [dateData, setDateData] = useState(TODAY_DATE);\n  const [attendenceData, setAttendenceData] = useState({});\n  const [needRefreshPage, setNeedRefreshPage] = useState(false);\n\n  const next = () => {\n    if (!checkCanNext()) {\n      return;\n    }\n    setSelectedData({ ...planData, ...attendenceData, date: dateData });\n    nextClick();\n  };\n  const handleDateChange = (e) => {\n    setDateData(e.target.value);\n    setNeedRefreshPage(true);\n  };\n  const handleAttendenceChange = (e) => {\n    if (Number.isNaN(parseInt(e.target.value, 10))) {\n      alert(\"請選擇人數\");\n      setAttendenceData({});\n      return;\n    }\n    setAttendenceData({ attendence: e.target.value });\n  };\n  const checkCanNext = () => {\n    let alertStr = \"請選擇\";\n    let canNext = true;\n    if (Object.keys(planData).length === 0) {\n      alertStr += \"預約時間\";\n      canNext = false;\n    }\n    if (JSON.stringify(attendenceData) === \"{}\") {\n      if (!canNext) {\n        alertStr += \"、\";\n      }\n      alertStr += \"人數\";\n      canNext = false;\n    }\n\n    if (!canNext) {\n      alert(alertStr);\n    }\n\n    return canNext;\n  };\n  return (\n    <div className=\"reservation__content__selectStep\">\n      <div className=\"reservation__content__selectStep__calendarBlock\">\n        <input\n          onChange={handleDateChange}\n          type=\"date\"\n          className=\"calendarBlock__day\"\n          defaultValue={TODAY_DATE}\n          min={TODAY_DATE}\n        ></input>\n        <Board\n          setPlanData={setPlanData}\n          calendarDate={dateData}\n          isReadOnly={false}\n          needRefreshPage={needRefreshPage}\n          setNeedRefreshPage={setNeedRefreshPage}\n        ></Board>\n      </div>\n\n      <div className=\"reservation__content__selectStep__resultBlock\">\n        <div className=\"resultBlock__select\">\n          {dataListItems.map((item) => {\n            if (Array.isArray(item.content)) {\n              //option list\n              return (\n                <select\n                  onChange={handleAttendenceChange}\n                  key={`item${item.label}`}\n                  className=\"resultBlock__select__item \"\n                >\n                  {item.content.map((text) => (\n                    <option key={text}>{text}</option>\n                  ))}\n                </select>\n              );\n            } else {\n              //draw div\n              return (\n                <div\n                  key={`item${item.label}`}\n                  className=\"resultBlock__select__item\"\n                >\n                  <div className=\"resultBlock__select__item__label\">\n                    {item.label}\n                  </div>\n                  <div className=\"resultBlock__select__item__content\">\n                    {planData === {} ? \"\" : planData[item.name]}\n                  </div>\n                </div>\n              );\n            }\n          })}\n        </div>\n        <div className=\"resultBlock__buttonGroup common__buttonGroup\">\n          {backButtonText !== undefined && (\n            <Button text={backButtonText} clickEvent={backClick}></Button>\n          )}\n          {nextButtonText !== undefined && (\n            <Button text={nextButtonText} clickEvent={next}></Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// const TODAY_DATE = (() => {\n//   const tzoffset = new Date().getTimezoneOffset() * 60000; //offset in milliseconds\n//   const localISOTime = new Date(Date.now() - tzoffset)\n//     .toISOString()\n//     .slice(0, -1);\n//   const today = localISOTime.slice(0, 10);\n//   return today;\n// })();\n","import React, { Component } from \"react\";\nimport \"./Form.css\";\nexport default class Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // list是要外部傳入的 this.props.formItemList\n      // list: [{ label: \"name\" }, { label: \"phone\" }, { label: \"email\" }],\n      // list: [\n      //   { label: \"name\", value: \"\" },\n      //   { label: \"phone\", value: \"\" },\n      //   { label: \"email\", value: \"\" },\n      //   { label: \"test\", value: \"\" },\n      // ],\n      formInputList: props.formInputList,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputClick = this.handleInputClick.bind(this);\n  }\n\n  handleChange(formItem, targetValue) {\n    const list = this.state.formInputList.slice();\n    for (let i = 0; i < list.length; i++) {\n      if (list[i].label === formItem.label) {\n        list[i].value = targetValue;\n        break;\n      }\n    }\n    this.setState({ list: list });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.getMessage();\n  }\n\n  getMessage = () => {\n    if (this.props.getMessage !== undefined) {\n      this.props.getMessage(this.state.formInputList);\n    }\n    if (this.props.needSubmitButton !== false) {\n      this.clearInput();\n    }\n  };\n  clearInput = () => {\n    const list = this.state.formInputList.slice();\n    list.forEach((item) => {\n      item.value = \"\";\n    });\n    this.setState({ list: list });\n  };\n  handleInputClick = () => {\n    if (this.props.setInputClick !== undefined) {\n      this.props.setInputClick(true);\n    }\n  };\n\n  render() {\n    if (this.props.needSubmitButton === false) {\n      this.getMessage();\n    }\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        {this.state.formInputList.map((inputItem) => (\n          <div key={inputItem.label} className=\"form__item\">\n            <label>{inputItem.label}</label>\n            <input\n              onClick={this.handleInputClick}\n              value={inputItem.value}\n              type={inputItem.type}\n              placeholder={inputItem.placeholder}\n              minLength={inputItem.minLength}\n              maxLength={inputItem.maxLength}\n              size={inputItem.size}\n              pattern={inputItem.pattern}\n              required={inputItem.required}\n              onChange={(e) => this.handleChange(inputItem, e.target.value)}\n            ></input>\n          </div>\n        ))}\n        {this.props.needSubmitButton === true ? (\n          <input className=\"common__submit\" type=\"submit\" value=\"新增\"></input>\n        ) : null}\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport Button from \"../../../components/Button\";\nimport Form from \"../../../components/Form\";\nimport \"./FillInRegion.css\";\nexport const FillInRegin = ({\n  titles,\n  subTitles,\n  planItems,\n  formInputList,\n  setFormInputList,\n  getUserInput,\n  backClick,\n  nextClick,\n  buttonTexts,\n  steps,\n  step,\n  selectedData,\n}) => {\n  return (\n    <div className=\"reservation__content__fillInStep\">\n      <p className=\"reservation__content__fillInStep__title common__title common__font--bold\">\n        {titles[1]}\n      </p>\n      <div className=\"reservation__content__fillInStep__contentBlock\">\n        <div className=\"planBlock common__block\">\n          <div className=\"planBlock__plan\">\n            <div className=\"planBlock__plan__subtitle common__block common__subtitle common__font--bold\">\n              {subTitles[1]}\n            </div>\n            {planItems.map((item) => (\n              <div\n                key={item.title}\n                className=\"planBlock__plan__item common__block common__heading common__font--bold\"\n              >\n                <div className=\"planBlock__plan__item__title\">{item.title}</div>\n                <div className=\"planBlock__plan__item__content\">\n                  {selectedData[item.name]}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"planBlock__input\">\n            {step === steps[1] ? (\n              <Form\n                formInputList={formInputList}\n                needSubmitButton={false}\n              ></Form>\n            ) : (\n              formInputList.map((info, index) => (\n                <div\n                  key={index}\n                  className=\"planBlock__input__info common__block common__heading common__font--bold\"\n                >\n                  <div className=\"planBlock__input__info__label\">\n                    {info.label}\n                  </div>\n                  <div className=\"planBlock__input__info__value\">\n                    {info.value}\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"reservation__content__fillInStep__buttonGroup common__buttonGroup\">\n        {step === steps[1] ? (\n          <Button text={buttonTexts.back} clickEvent={backClick}></Button>\n        ) : (\n          <Button text={buttonTexts.back} clickEvent={backClick}></Button>\n        )}\n\n        {step === steps[1] ? (\n          <Button text={buttonTexts.next} clickEvent={nextClick}></Button>\n        ) : (\n          <Button text={buttonTexts.next} clickEvent={nextClick}></Button>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport data from \"../data.json\";\nimport \"./Stepper.css\";\nexport const Stepper = ({ currentStep }) => {\n  const STEP_STATES = data.stepper.steps;\n  const STEP_STATES_NAME = data.stepper.steps_CH;\n\n  const STEP_COLORS = [\n    \"stepper__content__step--primary\",\n    \"stepper__content__step--selected\",\n  ];\n\n  return (\n    <div className=\"stepper\">\n      <div className=\"stepper__content\">\n        {STEP_STATES.map((step, index) => (\n          <div\n            key={`step${index}`}\n            className={`stepper__content__step ${\n              currentStep === STEP_STATES[index]\n                ? STEP_COLORS[1]\n                : STEP_COLORS[0]\n            }`}\n          >\n            {STEP_STATES_NAME[index]}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","const validateInput = (inputData) => {\r\n  const str = inputData.value;\r\n  const regExp = inputData.pattern;\r\n  if (regExp === null) {\r\n    return true; //不須驗證validation\r\n  }\r\n  return str.search(regExp) !== -1;\r\n};\r\n\r\nexport { validateInput };\r\n","import React, { useState } from \"react\";\nimport \"./Reservation.css\";\nimport multiLang_CHT from \"../../data.json\";\nimport { useHistory } from \"react-router-dom\";\nimport { SelectRegion } from \"./page/SelectRegion\";\nimport { FillInRegin } from \"./page/FillInRegion\";\nimport { Stepper } from \"../../components/Stepper\";\nimport { postReservedData } from \"../../apis/reservedDataApi\";\nimport { validateInput } from \"../../utils/Utils\";\n\nfunction Reservation() {\n  const history = useHistory();\n  const steps = multiLang_CHT.stepper.steps; //[\"select\", \"fillIn\", \"finish\"]\n  const userInfoForm = multiLang_CHT.reservationPage.userinfoform;\n  const copyUserInfoForm = JSON.parse(JSON.stringify(userInfoForm));\n  const [step, setStep] = useState(steps[0]);\n  const [formInputList, setFormInputList] = useState(copyUserInfoForm);\n  //TODO(問助教):黑科技，把 formInputList 傳進 form 之後，他就get到值了，不用 setFormInputList 也可以，不要問我為什麼，我才是最想知道的那個人QQ\n  const [selectedData, setSelectedData] = useState({});\n\n  const backClick = () => {\n    switch (step) {\n      case steps[2]:\n        setStep(steps[1]);\n        break;\n      case steps[1]:\n        setStep(steps[0]);\n        break;\n      default:\n        history.goBack();\n        break;\n    }\n  };\n  const nextClick = async () => {\n    switch (step) {\n      case steps[0]:\n        setStep(steps[1]);\n        break;\n      case steps[1]:\n        //驗證輸入合法性\n        const valid = formInputList.every(\n          (input) => validateInput(input) === true\n        );\n        if (!valid) {\n          alert(multiLang_CHT.messages.invalid);\n          break;\n        }\n        setStep(steps[2]);\n        break;\n      default:\n        const orderStatusData = { order_status: \"applied\" };\n        const sendData = {\n          ...selectedData,\n          ...filterFormData(formInputList),\n          ...orderStatusData,\n        };\n        let parsedData = await postReservedData({ data: sendData });\n        if (parsedData === null) {\n          // console.log(\"fetch data is null\");\n          break;\n        }\n        history.push(`/thankyou?orderId=${parsedData.order_id}`);\n\n        break;\n    }\n  };\n\n  return (\n    <div className=\"reservation common__pageFrame\">\n      <Stepper currentStep={step}></Stepper>\n      <div className=\"reservation__content\">\n        {step === steps[0] ? (\n          <SelectRegion\n            backClick={backClick}\n            nextClick={nextClick}\n            nextButtonText={\n              multiLang_CHT.reservationPage.selectStep.button.next\n            }\n            dataListItems={multiLang_CHT.reservationPage.selectStep.listItems}\n            setSelectedData={setSelectedData}\n          ></SelectRegion>\n        ) : (\n          <FillInRegin\n            titles={multiLang_CHT.reservationPage.titles}\n            subTitles={multiLang_CHT.reservationPage.subTitles}\n            planItems={multiLang_CHT.reservationPage.fillInStep.planItems}\n            formInputList={formInputList}\n            setFormInputList={setFormInputList}\n            backClick={backClick}\n            nextClick={nextClick}\n            buttonTexts={multiLang_CHT.reservationPage.fillInStep.button}\n            steps={steps}\n            step={step}\n            selectedData={selectedData}\n          ></FillInRegin>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Reservation;\n\nconst filterFormData = (formInputList) => {\n  let data = {};\n  formInputList.forEach((item) => {\n    data[item.name] = item.value;\n  });\n  return data;\n};\n","import React from \"react\";\nimport \"./Thankyou.css\";\nimport multiLang_CHT from \"../../data.json\";\nimport { Stepper } from \"../../components/Stepper\";\nimport { Link, useLocation } from \"react-router-dom\";\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\nfunction Thankyou() {\n  const query = useQuery();\n  return (\n    <div className=\"thankyou common__pageFrame\">\n      <Stepper currentStep={multiLang_CHT.stepper.steps[2]}></Stepper>\n      <div className=\"thankyou__content\">\n        <p className=\"thankyou__content__title common__title common__font--bold\">\n          {multiLang_CHT.thankyouPage.title}\n        </p>\n        <div className=\"thankyou__content__orderId common__heading common__block common__font--bold\">\n          <p className=\"thankyou__content__orderId__text\">\n            {multiLang_CHT.thankyouPage.yourOrderId}\n          </p>\n          <p className=\"thankyou__content__orderId__text\">\n            {query.get(\"orderId\")}\n          </p>\n        </div>\n\n        <div className=\"thankyou__content__texts common__block common__subtitle common__font--bold\">\n          {multiLang_CHT.thankyouPage.texts.map((txt, index) => (\n            <p className=\"thankyou__content__texts__text\" key={`id${index}`}>\n              {txt}\n            </p>\n          ))}\n        </div>\n        <Link to=\"/\">\n          <div className=\"thankyou__content__logo common__block\">\n            <div className=\"thankyou__content__logo__img\">\n              <img\n                className=\"\"\n                // src=\"https://idcweb1.ches.ntpc.edu.tw/art/images/home.png\"\n                alt=\"logo\"\n              />\n            </div>\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Thankyou;\n","import React, { useState, useEffect } from \"react\";\r\nimport { getReservedData } from \"../apis/reservedDataApi\";\r\nimport {\r\n  getConstData,\r\n  convertDataTimeToIndex,\r\n  getRoomDatas,\r\n  getEachTimeReservedStatus,\r\n} from \"./Board\";\r\nconst { ROOM_LIST, TIME_REGION, TIME_REGION_MAPPING } = getConstData();\r\n\r\nconst checkConflicted = (data, reservedStatus, timeRegion) => {\r\n  //取得當筆資料，把data裡面的時間轉換成index\r\n  let currentDataTimeIndexArr = [];\r\n  const indexsData = convertDataTimeToIndex(timeRegion, data)[0];\r\n  const startIndex = indexsData.startIndex;\r\n  const endIndex = indexsData.endIndex;\r\n  if (startIndex !== -1 && endIndex !== -1) {\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n      currentDataTimeIndexArr.push(i);\r\n    }\r\n  }\r\n  //check is conflicted\r\n  const isAppliedData = data.order_status === \"applied\";\r\n  const isTimeRegionOverlapped = currentDataTimeIndexArr.some(\r\n    (timeIndex) => reservedStatus[data.room][timeIndex] === true\r\n  );\r\n  const isConflicted = isAppliedData && isTimeRegionOverlapped;\r\n  return isConflicted;\r\n};\r\n\r\nexport const CalendarDateReservedData = ({\r\n  columnDate,\r\n  needRefreshPage,\r\n  setNeedRefreshPage,\r\n  dateClickHandler,\r\n  selectedRoom,\r\n}) => {\r\n  const [dateDatas, setDateDatas] = useState(null);\r\n  const fetchReservedData = async () => {\r\n    const fetchedData = await getReservedData(columnDate, undefined, undefined);\r\n    if (fetchedData === null) {\r\n      return;\r\n    }\r\n    const resultData = fetchedData.result;\r\n    if (resultData.length === 0) {\r\n      // console.log(\"fetch data is empty array\");\r\n    }\r\n    setNeedRefreshPage(false);\r\n    setDateDatas(resultData);\r\n  };\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      await fetchReservedData();\r\n    }\r\n    fetchData();\r\n  }, [needRefreshPage]);\r\n\r\n  const switchOrderStatus = (order_status) => {\r\n    switch (order_status) {\r\n      case \"reserved\":\r\n        return \"calendar__dates__date__entries__col--reserved\";\r\n      case \"canceled\":\r\n        return \"calendar__dates__date__entries__col--canceled\";\r\n      default:\r\n        return \"calendar__dates__date__entries__col--applied\";\r\n    }\r\n  };\r\n\r\n  const reservedStatus =\r\n    dateDatas !== null\r\n      ? getEachTimeReservedStatus(\r\n          getRoomDatas(ROOM_LIST, TIME_REGION, dateDatas),\r\n          TIME_REGION_MAPPING,\r\n          ROOM_LIST\r\n        )\r\n      : null;\r\n\r\n  return (\r\n    <div className=\"calendar__dates__date__entries\">\r\n      {dateDatas === null || dateDatas.length === 0\r\n        ? \"no reserved\"\r\n        : dateDatas\r\n            .filter((item) =>\r\n              selectedRoom === \"\"\r\n                ? item.room !== selectedRoom\r\n                : item.room === selectedRoom\r\n            )\r\n            .map((item) => (\r\n              <div\r\n                key={item.order_id}\r\n                className={`calendar__dates__date__entries__col \r\n              ${\r\n                checkConflicted(item, reservedStatus, TIME_REGION)\r\n                  ? \"calendar__dates__date__entries__col--conflicted\"\r\n                  : switchOrderStatus(item.order_status)\r\n              }\r\n              `}\r\n                id={item.order_id}\r\n                onClick={(e) =>\r\n                  dateClickHandler(\r\n                    e,\r\n                    checkConflicted(item, reservedStatus, TIME_REGION),\r\n                    item.date\r\n                  )\r\n                }\r\n              >\r\n                {`${item.room}-${item.start_time}-${item.duration}hr`}\r\n              </div>\r\n            ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getReservedData, patchReservedData } from \"../apis/reservedDataApi\";\r\nimport multiLang_CHT from \"../data.json\";\r\nimport { TODAY_DATE } from \"../utils/Date\";\r\nimport CloseIcon from \"./CloseIcon\";\r\n\r\nconst dateMultiple = [1000, 100, 1];\r\nconst checkDateIsEarlyThanToday = (date, today) => {\r\n  let dateNum = 0;\r\n  let todayNum = 0;\r\n  const dateArr = date.split(\"-\");\r\n  dateArr.forEach((num, index) => {\r\n    dateNum += num * dateMultiple[index];\r\n  });\r\n\r\n  const todayArr = today.split(\"-\");\r\n  todayArr.forEach((num, index) => {\r\n    todayNum += num * dateMultiple[index];\r\n  });\r\n  return dateNum < todayNum;\r\n};\r\n\r\nexport const CalendarOrderDialog = ({\r\n  isShow,\r\n  orderId,\r\n  closeClickHandler,\r\n  setNeedRefreshPage,\r\n  currentOrderIsConflicted,\r\n  selectedDate,\r\n}) => {\r\n  const [orderData, setOrderData] = useState(null);\r\n  const [orderStatusButton, setOrderStatusButton] = useState(null);\r\n  const [originOrderStatusButton, setOriginOrderStatusButton] = useState(null);\r\n  let selectedOrderStatusButton = orderStatusButton;\r\n  const fetchData = async () => {\r\n    const fetchedData = await getReservedData(undefined, orderId, undefined); //only one record\r\n    if (fetchedData === null) {\r\n      return;\r\n    }\r\n    const resultData = fetchedData.result;\r\n    if (resultData.length === 0) {\r\n      // console.log(\"fetch data is empty array\");\r\n    } else {\r\n      setOrderStatusButton(resultData[0].order_status);\r\n      setOriginOrderStatusButton(resultData[0].order_status);\r\n    }\r\n\r\n    setOrderData(resultData);\r\n  };\r\n  const changeOrderStatusClickHandler = (e, option) => {\r\n    setOrderStatusButton(e.target.id);\r\n    selectedOrderStatusButton = option;\r\n  };\r\n  const orderStatusConfirmButtonClickHandler = async () => {\r\n    const target_column = \"order_status\";\r\n    const target_value = selectedOrderStatusButton;\r\n    const order_id = orderId;\r\n    const patchData = {\r\n      data: {\r\n        target_column: target_column,\r\n        target_value: target_value,\r\n        order_id: order_id,\r\n      },\r\n    };\r\n    const parsedData = await patchReservedData(patchData);\r\n    if (parsedData.status === \"error\") {\r\n      const msg = `${multiLang_CHT.apiResponse.reservationData.patchFailed}\\n${parsedData.message}`;\r\n      alert(msg);\r\n    }\r\n    closeClickHandler();\r\n    setNeedRefreshPage(true);\r\n  };\r\n\r\n  const checkOrderStatusButtonIsDisable = (\r\n    orderStatus,\r\n    option,\r\n    orderIsConflicted,\r\n    originOrderStatusButton,\r\n    clickDate\r\n  ) => {\r\n    if (checkDateIsEarlyThanToday(clickDate, TODAY_DATE)) {\r\n      return true; //不能按\r\n    }\r\n    if (originOrderStatusButton === \"canceled\") {\r\n      return true; //不能按\r\n    }\r\n    if (orderIsConflicted && option === \"reserved\") {\r\n      return true; //不能按\r\n    }\r\n    if (orderStatus === option) {\r\n      return true; //不能按\r\n    }\r\n    return false;\r\n  };\r\n  const checkConfirmButtonIsDisable = (orderStatus, option) => {\r\n    if (orderStatus === option) {\r\n      return true; //不能按\r\n    }\r\n    return false;\r\n  };\r\n\r\n  useEffect(async () => {\r\n    fetchData();\r\n  }, [orderId, selectedDate]);\r\n\r\n  if (isShow) {\r\n    return (\r\n      <div className=\"dialog\">\r\n        <div className=\"dialog__dialogMask\" />\r\n        <div className=\"dialog__dialogContent\">\r\n          <CloseIcon clickHandler={closeClickHandler} />\r\n          {/* <div className=\"dialog__icon\" onClick={closeClickHandler}>\r\n            <img />\r\n          </div> */}\r\n          {orderData === null || orderData.length === 0\r\n            ? \"no reserved\"\r\n            : orderData.map((item) => (\r\n                <div key={item.order_id} className=\"calendar__dialog__table\">\r\n                  {multiLang_CHT.orderTableList.map((data) => (\r\n                    <div\r\n                      key={data.key}\r\n                      className=\"calendar__dialog__table__item\"\r\n                    >\r\n                      <p className=\"calendar__dialog__table__item__label\">\r\n                        {data.label}\r\n                      </p>\r\n\r\n                      {data.options === undefined ? (\r\n                        <p className=\"calendar__dialog__table__item__value\">\r\n                          {item[data.key]}\r\n                        </p>\r\n                      ) : (\r\n                        <div className=\"board__buttons\">\r\n                          {data.options.map((option) => {\r\n                            return (\r\n                              <button\r\n                                type=\"button\"\r\n                                key={option}\r\n                                id={option}\r\n                                className={`btn board__buttons__button ${\r\n                                  orderStatusButton === option\r\n                                    ? \"board__buttons__button--selected\"\r\n                                    : \"\"\r\n                                } \r\n                                ${\r\n                                  originOrderStatusButton === option\r\n                                    ? \"common__font--bold board__buttons__button--primary\"\r\n                                    : \"\"\r\n                                }\r\n                                ${\r\n                                  checkOrderStatusButtonIsDisable(\r\n                                    orderStatusButton,\r\n                                    option,\r\n                                    currentOrderIsConflicted,\r\n                                    originOrderStatusButton,\r\n                                    item.date\r\n                                  )\r\n                                    ? \"board__buttons__button--disabled\"\r\n                                    : \"\"\r\n                                }\r\n                                `}\r\n                                disabled={`${\r\n                                  checkOrderStatusButtonIsDisable(\r\n                                    orderStatusButton,\r\n                                    option,\r\n                                    currentOrderIsConflicted,\r\n                                    originOrderStatusButton,\r\n                                    item.date\r\n                                  )\r\n                                    ? \"disabled\"\r\n                                    : \"\"\r\n                                }`}\r\n                                onClick={(e) =>\r\n                                  changeOrderStatusClickHandler(e, option)\r\n                                }\r\n                              >\r\n                                {option}\r\n                              </button>\r\n                            );\r\n                          })}\r\n                          <button\r\n                            type=\"button\"\r\n                            className={`btn dialog__confirmButton\r\n                            ${\r\n                              checkConfirmButtonIsDisable(\r\n                                orderStatusButton,\r\n                                originOrderStatusButton\r\n                              )\r\n                                ? \"dialog__confirmButton--disabled\"\r\n                                : \"\"\r\n                            }\r\n                            \r\n                            `}\r\n                            onClick={orderStatusConfirmButtonClickHandler}\r\n                            disabled={`${\r\n                              checkConfirmButtonIsDisable(\r\n                                orderStatusButton,\r\n                                orderData[0].order_status\r\n                              )\r\n                                ? \"disabled\"\r\n                                : \"\"\r\n                            }`}\r\n                          >\r\n                            {multiLang_CHT.managementPage.dialog.confirmButton}\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Button from \"../components/Button\";\r\nimport \"./Calendar.css\";\r\nimport { CalendarDateReservedData } from \"./CalendarDateReservedData\";\r\nimport { CalendarOrderDialog } from \"./CalandarOrderDialog\";\r\n\r\nconst daysShortArr = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\nconst monthNamesArr = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nconst useCalendar = (daysShort = daysShortArr, monthNames = monthNamesArr) => {\r\n  const today = new Date();\r\n  const todayFormatted = `${today.getDate()}-${\r\n    today.getMonth() + 1\r\n  }-${today.getFullYear()}`; //2021-07-25\r\n  const daysInWeek = [1, 2, 3, 4, 5, 6, 0]; // Sunday - Saturday : 0 - 6\r\n  const [selectedDate, setSelectedDate] = useState(today);\r\n  const selectedMonthLastDate = new Date(\r\n    selectedDate.getFullYear(),\r\n    selectedDate.getMonth() + 1,\r\n    0\r\n  ); //2021-07-31\r\n  const prevMonthLastDate = new Date(\r\n    selectedDate.getFullYear(),\r\n    selectedDate.getMonth(),\r\n    0\r\n  ); //2021-06-30\r\n  const daysInMonth = selectedMonthLastDate.getDate(); //31\r\n  const firstDayInMonth = new Date(\r\n    selectedDate.getFullYear(),\r\n    selectedDate.getMonth(),\r\n    1\r\n  ).getDay(); // Sunday - Saturday : 0 - 6\r\n  const startingPoint = daysInWeek.indexOf(firstDayInMonth) + 1;\r\n  let prevMonthStartingPoint =\r\n    prevMonthLastDate.getDate() - daysInWeek.indexOf(firstDayInMonth) + 1;\r\n  let currentMonthCounter = 1;\r\n  let nextMonthCounter = 1;\r\n  const rows = 6;\r\n  const cols = 7;\r\n  const calendarRows = {};\r\n\r\n  for (let i = 1; i < rows + 1; i++) {\r\n    for (let j = 1; j < cols + 1; j++) {\r\n      if (!calendarRows[i]) {\r\n        calendarRows[i] = [];\r\n      }\r\n\r\n      if (i === 1) {\r\n        if (j < startingPoint) {\r\n          calendarRows[i] = [\r\n            ...calendarRows[i],\r\n            {\r\n              classes: \"calendar__dates__prevMonth\",\r\n              date: `${prevMonthStartingPoint}-${\r\n                selectedDate.getMonth() === 0 ? 12 : selectedDate.getMonth()\r\n              }-${\r\n                selectedDate.getMonth() === 0\r\n                  ? selectedDate.getFullYear() - 1\r\n                  : selectedDate.getFullYear()\r\n              }`,\r\n              value: prevMonthStartingPoint,\r\n            },\r\n          ];\r\n          prevMonthStartingPoint++;\r\n        } else {\r\n          calendarRows[i] = [\r\n            ...calendarRows[i],\r\n            {\r\n              classes: \"\",\r\n              date: `${currentMonthCounter}-${\r\n                selectedDate.getMonth() + 1\r\n              }-${selectedDate.getFullYear()}`,\r\n              value: currentMonthCounter,\r\n            },\r\n          ];\r\n          currentMonthCounter++;\r\n        }\r\n      } else if (i > 1 && currentMonthCounter < daysInMonth + 1) {\r\n        calendarRows[i] = [\r\n          ...calendarRows[i],\r\n          {\r\n            classes: \"\",\r\n            date: `${currentMonthCounter}-${\r\n              selectedDate.getMonth() + 1\r\n            }-${selectedDate.getFullYear()}`,\r\n            value: currentMonthCounter,\r\n          },\r\n        ];\r\n        currentMonthCounter++;\r\n      } else {\r\n        calendarRows[i] = [\r\n          ...calendarRows[i],\r\n          {\r\n            classes: \"calendar__dates__nextMonth\",\r\n            date: `${nextMonthCounter}-${\r\n              selectedDate.getMonth() + 2 === 13\r\n                ? 1\r\n                : selectedDate.getMonth() + 2\r\n            }-${\r\n              selectedDate.getMonth() + 2 === 13\r\n                ? selectedDate.getFullYear() + 1\r\n                : selectedDate.getFullYear()\r\n            }`,\r\n            value: nextMonthCounter,\r\n          },\r\n        ];\r\n        nextMonthCounter++;\r\n      }\r\n    }\r\n  }\r\n  const getPrevMonth = () => {\r\n    setSelectedDate(\r\n      (prevValue) =>\r\n        new Date(prevValue.getFullYear(), prevValue.getMonth() - 1, 1)\r\n    );\r\n  };\r\n  const getNextMonth = () => {\r\n    setSelectedDate(\r\n      (prevValue) =>\r\n        new Date(prevValue.getFullYear(), prevValue.getMonth() + 1, 1)\r\n    );\r\n  };\r\n\r\n  return {\r\n    daysShort,\r\n    monthNames,\r\n    todayFormatted,\r\n    calendarRows,\r\n    selectedDate,\r\n    getPrevMonth,\r\n    getNextMonth,\r\n  };\r\n};\r\n\r\nconst reverseDate = (date) => {\r\n  let dates = date\r\n    .split(\"-\")\r\n    .reverse()\r\n    .map((num) => num.padStart(2, \"0\")); //十位數補零\r\n  return dates.join(\"-\");\r\n};\r\n\r\nconst Calendar = ({\r\n  needRefreshPage,\r\n  setNeedRefreshPage,\r\n  selectedRoom = \"\",\r\n  setManagementSelectedDate,\r\n  managementSelectedDate,\r\n}) => {\r\n  const {\r\n    daysShort,\r\n    monthNames,\r\n    todayFormatted,\r\n    calendarRows,\r\n    selectedDate,\r\n    getPrevMonth,\r\n    getNextMonth,\r\n  } = useCalendar();\r\n\r\n  const [showDialog, setShowDialog] = useState(false);\r\n  const [currentOrderIsConflicted, setCurrentOrderIsConflicted] =\r\n    useState(false);\r\n  const [orderId, setOrderId] = useState(\"\");\r\n  const dateClickHandler = (e, isConflicted, managementSelectedDate) => {\r\n    const targetId = e.target.id;\r\n    if (targetId === \"\") {\r\n      return;\r\n    }\r\n    setShowDialog(true);\r\n    setOrderId(e.target.id);\r\n    setCurrentOrderIsConflicted(isConflicted);\r\n    setManagementSelectedDate(managementSelectedDate);\r\n  };\r\n  const closeClickHandler = () => {\r\n    setShowDialog(false);\r\n    setOrderId(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar\">\r\n      <CalendarOrderDialog\r\n        isShow={showDialog}\r\n        orderId={orderId}\r\n        closeClickHandler={closeClickHandler}\r\n        setNeedRefreshPage={setNeedRefreshPage}\r\n        currentOrderIsConflicted={currentOrderIsConflicted}\r\n        managementSelectedDate={managementSelectedDate}\r\n      />\r\n      <div className=\"calendar__month\">\r\n        <Button text=\"prev\" clickEvent={getPrevMonth} />\r\n        <p className=\"common__subtitle common__font--bold\">\r\n          {`${\r\n            monthNames[selectedDate.getMonth()]\r\n          }-${selectedDate.getFullYear()}`}\r\n        </p>\r\n        <Button text=\"next\" clickEvent={getNextMonth} />\r\n      </div>\r\n      <div className=\"calendar__dates\">\r\n        {daysShort.map((day) => (\r\n          <div\r\n            key={day}\r\n            className={`calendar__dates__days calendar__dates__item common__font--bold common__subtitle`}\r\n          >\r\n            {day}\r\n          </div>\r\n        ))}\r\n        {Object.values(calendarRows).map((cols) =>\r\n          cols.map((col) => {\r\n            return col.date === todayFormatted ? (\r\n              <div\r\n                key={col.date}\r\n                className={`${col.classes} calendar__dates__date calendar__dates__item`}\r\n              >\r\n                <div className=\"common__font--bold common__heading\">\r\n                  <div className=\"calendar__dates__date__number calendar__dates__today\">\r\n                    {col.value}\r\n                  </div>\r\n                </div>\r\n\r\n                <CalendarDateReservedData\r\n                  columnDate={reverseDate(col.date)}\r\n                  needRefreshPage={needRefreshPage}\r\n                  setNeedRefreshPage={setNeedRefreshPage}\r\n                  dateClickHandler={dateClickHandler}\r\n                  selectedRoom={selectedRoom}\r\n                  setManagementSelectedDate={setManagementSelectedDate}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <div\r\n                key={col.date}\r\n                className={`${col.classes} calendar__dates__date calendar__dates__item`}\r\n              >\r\n                <div className=\"calendar__dates__date__number common__font--bold common__heading\">\r\n                  {col.value}\r\n                </div>\r\n\r\n                <CalendarDateReservedData\r\n                  columnDate={reverseDate(col.date)}\r\n                  needRefreshPage={needRefreshPage}\r\n                  setNeedRefreshPage={setNeedRefreshPage}\r\n                  dateClickHandler={dateClickHandler}\r\n                  selectedRoom={selectedRoom}\r\n                />\r\n              </div>\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./Management.css\";\r\nimport Calendar from \"../../components/Calendar\";\r\nimport { Board, getConstData } from \"../../components/Board\";\r\nimport { TODAY_DATE } from \"../../utils/Date\";\r\nimport { deleteUser } from \"../../apis/usersApi\";\r\nimport Hamburger from \"../../components/Hamburger\";\r\nimport multiLang_CHT from \"../../data.json\";\r\nimport Button from \"../../components/Button\";\r\n\r\nconst { ROOM_LIST } = getConstData();\r\n\r\nfunction Management() {\r\n  const history = useHistory();\r\n  const [needRefreshPage, setNeedRefreshPage] = useState(false);\r\n  const [selectedRoom, setSelectedRoom] = useState(\"\");\r\n  const [managementSelectedDate, setManagementSelectedDate] =\r\n    useState(TODAY_DATE);\r\n  const [showTimeLineBoard, setShowTimeLineBoard] = useState(false);\r\n  const handleRoomSelectChange = (e) => {\r\n    setSelectedRoom(e.target.value);\r\n  };\r\n  const closeClickHandler = () => {\r\n    setShowTimeLineBoard(!showTimeLineBoard);\r\n  };\r\n\r\n  const handleManagementDateChange = (e) => {\r\n    setManagementSelectedDate(e.target.value);\r\n  };\r\n\r\n  const logoutButtonClickHandler = async () => {\r\n    await deleteUser();\r\n    history.push(\"/\");\r\n    // console.log(parsedData);\r\n  };\r\n  return (\r\n    <div className=\"management common__pageFrame\">\r\n      <div className={showTimeLineBoard ? \"moveHamburger\" : \"\"}>\r\n        <Hamburger\r\n          isShowItem={showTimeLineBoard}\r\n          clickHandler={closeClickHandler}\r\n        />\r\n      </div>\r\n      <div\r\n        className={`management__frame ${\r\n          showTimeLineBoard ? \"\" : \"common__hidden\"\r\n        }`}\r\n      >\r\n        <div className={`management__frame__bg`} />\r\n        <div className=\"management__frame__selectBlock\">\r\n          <div className=\"management__frame__selectBlock__item\">\r\n            <label className=\"common__font--bold\">Select Room</label>\r\n            <select onChange={handleRoomSelectChange}>\r\n              <option value={multiLang_CHT.roomInfo.selectDefaultOption.id}>\r\n                {multiLang_CHT.roomInfo.selectDefaultOption.title}\r\n              </option>\r\n              {ROOM_LIST.map((room) => (\r\n                <option key={room.id} value={room.id}>\r\n                  {room.title}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"management__frame__selectBlock__item\">\r\n            <label className=\"common__font--bold\">Selected Date</label>\r\n\r\n            <input\r\n              onChange={handleManagementDateChange}\r\n              type=\"date\"\r\n              className=\"\"\r\n              value={managementSelectedDate}\r\n            ></input>\r\n          </div>\r\n          <div className=\"management__frame__selectBlock__item\">\r\n            <Button\r\n              text={multiLang_CHT.memberSystemPage.card.instruction.logout}\r\n              clickEvent={logoutButtonClickHandler}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className={`management__frame__timeline`}>\r\n          <div className=\"management__frame__timeline__board\">\r\n            <Board\r\n              calendarDate={managementSelectedDate}\r\n              selectedRoom={selectedRoom}\r\n              needRefreshPage={needRefreshPage}\r\n              isReadOnly={true}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Calendar\r\n        needRefreshPage={needRefreshPage}\r\n        setNeedRefreshPage={setNeedRefreshPage}\r\n        selectedRoom={selectedRoom}\r\n        setManagementSelectedDate={setManagementSelectedDate}\r\n        managementSelectedDate={managementSelectedDate}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Management;\r\n","import React, { Component } from \"react\";\nimport Form from \"../../components/Form\";\nimport \"./BulletinBoard.css\";\nimport Button from \"../../components/Button\";\nimport { Link } from \"react-router-dom\";\n\nexport default class BulletinBoard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      listInfos: [],\n    };\n  }\n  formInputList = [\n    { label: \"name\", value: \"\" },\n    { label: \"phone\", value: \"\" },\n    { label: \"email\", value: \"\" },\n  ];\n  getMessage = (formInputList) => {\n    let message = \"\";\n    formInputList.forEach((item, index) => {\n      if (index !== 0) message += \",\";\n      message += [item.value];\n    });\n\n    const listInfos = this.state.listInfos.slice();\n    listInfos.push({ num: `id${this.state.id}`, message: message });\n    this.setState((state) => ({\n      id: state.id + 1,\n      listInfos: listInfos,\n    }));\n  };\n  removeInfo = (item) => {\n    return (e) => {\n      e.preventDefault();\n      const listInfos = this.state.listInfos.slice();\n      this.setState({\n        listInfos: listInfos.filter((info) => info.num !== item.num),\n      });\n    };\n  };\n  backClick = () => {\n    this.props.history.go(-1);\n  };\n  render() {\n    return (\n      <div className=\"bulletinBoard\">\n        <div>BulletinBoard</div>\n        <div className=\"bulletinBoard__form\">\n          <Form\n            formInputList={this.formInputList}\n            getMessage={this.getMessage}\n            needSubmitButton={true}\n          ></Form>\n        </div>\n        <div className=\"bulletinBoard__messageList\">\n          {this.state.listInfos.map((info) => (\n            <div key={info.num} className=\"bulletinBoard__messageList__message\">\n              <p>{info.message}</p>\n              <input\n                type=\"submit\"\n                value=\"delete\"\n                onClick={this.removeInfo(info)}\n                className=\"common__submit\"\n              ></input>\n            </div>\n          ))}\n        </div>\n        <Link to=\"/\" className=\"\">\n          <Button text=\"返回首頁\"></Button>\n        </Link>\n        <button className={`btn`} onClick={this.backClick}>\n          返回上一頁\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport \"./MemberSystem.css\";\r\nimport multiLang_CHT from \"../../data.json\";\r\nimport { postUser, patchUser, deleteUser } from \"../../apis/usersApi\";\r\nimport Button from \"../../components/Button\";\r\nimport { checkLoggedIn } from \"../../utils/API\";\r\nimport { validateInput } from \"../../utils/Utils\";\r\n\r\nconst inputVerifier = (ownerFormInputList, setAccountActionStatus) => {\r\n  let errorMsg = \"\";\r\n  const emptyColumns = ownerFormInputList.filter((col) => col.value === \"\");\r\n  if (emptyColumns.length === 0) {\r\n    //都有輸入資料\r\n    //驗證合法性\r\n    const valid = ownerFormInputList.every(\r\n      (input) => validateInput(input) === true\r\n    );\r\n    if (!valid) {\r\n      errorMsg += multiLang_CHT.messages.invalid;\r\n    }\r\n    return errorMsg;\r\n  }\r\n  setAccountActionStatus(\"\");\r\n  //錯誤訊息：請輸入帳號、密碼...etc\r\n  errorMsg += multiLang_CHT.memberSystemPage.errorMessage.emptyColumns;\r\n  emptyColumns.forEach((col, index) => {\r\n    errorMsg += col.label;\r\n    errorMsg +=\r\n      index === emptyColumns.length - 1\r\n        ? \"\"\r\n        : multiLang_CHT.memberSystemPage.errorMessage.comma;\r\n  });\r\n\r\n  return errorMsg;\r\n};\r\nconst switchAccountStatus = (accountStatus, setAccountStatus) => {\r\n  switch (accountStatus) {\r\n    case \"login\":\r\n      setAccountStatus(\"register\");\r\n      break;\r\n    case \"register\":\r\n      setAccountStatus(\"login\");\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst sendApi = async (accountStatus, sendData) => {\r\n  let parsedData = null;\r\n  switch (accountStatus) {\r\n    case \"login\":\r\n      parsedData = await patchUser({ data: sendData });\r\n      break;\r\n    case \"register\":\r\n      parsedData = await postUser({ data: sendData });\r\n      break;\r\n    case \"logout\":\r\n      parsedData = await deleteUser();\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return parsedData;\r\n};\r\n\r\nconst switchAccountMessageColor = (accountActionStatus) => {\r\n  switch (accountActionStatus) {\r\n    case \"ok\":\r\n      return \"memberSystem__card__message--ok\";\r\n    case \"error\":\r\n      return \"memberSystem__card__message--error\";\r\n    default:\r\n      return \"memberSystem__card__message--error\";\r\n  }\r\n};\r\n\r\nfunction MemberSystem() {\r\n  const history = useHistory();\r\n  const ownerLoginForm = multiLang_CHT.memberSystemPage.ownerLoginForm;\r\n  const ownerRegisterForm = multiLang_CHT.memberSystemPage.ownerRegisterForm;\r\n\r\n  const copyOwnerLoginForm = JSON.parse(JSON.stringify(ownerLoginForm));\r\n\r\n  const copyOwnerRegisterForm = JSON.parse(JSON.stringify(ownerRegisterForm));\r\n\r\n  const [accountStatus, setAccountStatus] = useState(\"login\");\r\n  const [accountActionMessage, setAccountActionMessage] = useState(\"\");\r\n  const [accountActionStatus, setAccountActionStatus] = useState(\"\");\r\n  const [inputClick, setInputClick] = useState(false);\r\n  const [ownerFormInputList, setOwnerLoginFormInputList] =\r\n    useState(copyOwnerLoginForm);\r\n\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  // console.log(isLoggedIn);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const isLogin = await checkLoggedIn();\r\n      setIsLoggedIn(isLogin);\r\n    }\r\n    fetchData();\r\n  }, [isLoggedIn]);\r\n\r\n  const clickAccountStatusHandler = () => {\r\n    switchAccountStatus(accountStatus, setAccountStatus);\r\n    const formInput =\r\n      accountStatus === \"login\" ? copyOwnerRegisterForm : copyOwnerLoginForm;\r\n    setAccountActionMessage(\"\");\r\n    setOwnerLoginFormInputList(formInput);\r\n  };\r\n\r\n  const buttonClickHandler = async () => {\r\n    if (isLoggedIn) {\r\n      await sendApi(\"logout\");\r\n      history.push(\"/\");\r\n      return;\r\n    }\r\n\r\n    setInputClick(false);\r\n    const errorMsg = inputVerifier(ownerFormInputList, setAccountActionStatus);\r\n    if (errorMsg !== \"\") {\r\n      // console.log(errorMsg);\r\n      setAccountActionMessage(errorMsg);\r\n      return;\r\n    }\r\n\r\n    const formInput =\r\n      accountStatus === \"login\" ? copyOwnerLoginForm : copyOwnerRegisterForm;\r\n    setOwnerLoginFormInputList(formInput);\r\n    let sendData = {};\r\n    ownerFormInputList.forEach((item) => {\r\n      sendData[item.name] = item.value;\r\n    });\r\n    const parsedData = await sendApi(accountStatus, sendData);\r\n    // console.log(parsedData.message);\r\n    setAccountActionStatus(parsedData.status);\r\n    setAccountActionMessage(parsedData.message);\r\n    if (parsedData.status !== \"ok\") {\r\n      return;\r\n    }\r\n    switch (accountStatus) {\r\n      case \"login\":\r\n        history.push(\"/\");\r\n        break;\r\n      case \"register\":\r\n        // history.go(0);\r\n        break;\r\n      case \"logout\":\r\n        history.push(\"/\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleChange = (formItem, targetValue) => {\r\n    const list = ownerFormInputList.slice();\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (list[i].label === formItem.label) {\r\n        list[i].value = targetValue;\r\n        break;\r\n      }\r\n    }\r\n    setOwnerLoginFormInputList(list);\r\n  };\r\n\r\n  const handleInputClick = () => {\r\n    setInputClick(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"memberSystem common__pageFrame\">\r\n      <p className=\"common__block common__block--bilateral common__subtitle\">\r\n        {multiLang_CHT.memberSystemPage.welcome}\r\n      </p>\r\n      <div className=\"memberSystem__content\">\r\n        <div className=\"memberSystem__card\">\r\n          {isLoggedIn ? (\r\n            <p className=\"memberSystem__card__loggedIn common__subtitle \">\r\n              {multiLang_CHT.memberSystemPage.loggedIn}\r\n            </p>\r\n          ) : (\r\n            <div className=\"memberSystem__card__form\">\r\n              <form>\r\n                {ownerFormInputList.map((inputItem) => (\r\n                  <div key={inputItem.label} className=\"form__item\">\r\n                    <label>{inputItem.label}</label>\r\n                    <input\r\n                      onClick={handleInputClick}\r\n                      value={inputItem.value}\r\n                      type={inputItem.type}\r\n                      placeholder={inputItem.placeholder}\r\n                      minLength={inputItem.minLength}\r\n                      maxLength={inputItem.maxLength}\r\n                      size={inputItem.size}\r\n                      pattern={inputItem.pattern}\r\n                      required={inputItem.required}\r\n                      onChange={(e) => handleChange(inputItem, e.target.value)}\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </form>\r\n              {accountActionMessage !== \"\" && !inputClick && (\r\n                <p\r\n                  className={`memberSystem__card__message ${switchAccountMessageColor(\r\n                    accountActionStatus\r\n                  )}`}\r\n                >\r\n                  {accountActionMessage}\r\n                </p>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"memberSystem__card__button\">\r\n            {isLoggedIn && (\r\n              <Link\r\n                to=\"/management\"\r\n                className=\"common__block home__content__btn\"\r\n              >\r\n                <Button text=\"前往後台\"></Button>\r\n              </Link>\r\n            )}\r\n            <Button\r\n              text={\r\n                isLoggedIn\r\n                  ? multiLang_CHT.memberSystemPage.card.instruction[\"logout\"]\r\n                  : multiLang_CHT.memberSystemPage.card.instruction[\r\n                      accountStatus\r\n                    ]\r\n              }\r\n              clickEvent={buttonClickHandler}\r\n            />\r\n          </div>\r\n          {isLoggedIn ? null : (\r\n            <div className=\"memberSystem__card__instruction \">\r\n              <p\r\n                className=\"memberSystem__card__instruction__action\"\r\n                onClick={clickAccountStatusHandler}\r\n              >\r\n                {multiLang_CHT.memberSystemPage.card.hint[accountStatus]}\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MemberSystem;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./pages/HomePage/Home\";\nimport Notice from \"./pages/NoticePage/Notice\";\nimport Reservation from \"./pages/ReservationPage/Reservation\";\nimport Thankyou from \"./pages/ThankyouPage/Thankyou\";\nimport Management from \"./pages/ManagementPage/Management\";\nimport BulletinBoard from \"./pages/ListPage/BulletinBoard\";\nimport MemberSystem from \"./pages/MemberSystemPage/MemberSystem\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"container\">\n          <Header />\n          <main>\n            <Switch>\n              <Route exact path=\"/\" component={Home}></Route>\n              <Route path=\"/notice\" component={Notice}></Route>\n              <Route path=\"/reservation\" component={Reservation}></Route>\n              <Route path=\"/thankyou\" component={Thankyou}></Route>\n              <Route path=\"/bulletinBoard\" component={BulletinBoard}></Route>\n              <Route path=\"/management\" component={Management}></Route>\n              <Route path=\"/memberSystem\" component={MemberSystem}></Route>\n            </Switch>\n          </main>\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/reset.css\";\nimport \"./css/common.css\";\nimport \"./css/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}